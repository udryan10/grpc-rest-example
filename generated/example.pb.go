// Code generated by protoc-gen-gogo.
// source: example.proto
// DO NOT EDIT!

/*
	Package generated is a generated protocol buffer package.

	It is generated from these files:
		example.proto

	It has these top-level messages:
		Maps
		Marker
		EmptyGet
*/
package generated

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/opsee/protobuf/opseeproto"

import github_com_graphql_go_graphql "github.com/graphql-go/graphql"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

type Maps struct {
	Markers []*Marker `protobuf:"bytes,1,rep,name=markers" json:"markers,omitempty"`
}

func (m *Maps) Reset()                    { *m = Maps{} }
func (m *Maps) String() string            { return proto.CompactTextString(m) }
func (*Maps) ProtoMessage()               {}
func (*Maps) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{0} }

func (m *Maps) GetMarkers() []*Marker {
	if m != nil {
		return m.Markers
	}
	return nil
}

type Marker struct {
	Point         int32  `protobuf:"varint,1,opt,name=point,proto3" json:"point,omitempty"`
	HomeTeam      string `protobuf:"bytes,2,opt,name=homeTeam,proto3" json:"homeTeam,omitempty"`
	AwayTeam      string `protobuf:"bytes,3,opt,name=awayTeam,proto3" json:"awayTeam,omitempty"`
	MarkerImage   string `protobuf:"bytes,4,opt,name=markerImage,proto3" json:"markerImage,omitempty"`
	Information   string `protobuf:"bytes,5,opt,name=information,proto3" json:"information,omitempty"`
	Fixture       string `protobuf:"bytes,6,opt,name=fixture,proto3" json:"fixture,omitempty"`
	Capacity      string `protobuf:"bytes,7,opt,name=capacity,proto3" json:"capacity,omitempty"`
	PreviousScore string `protobuf:"bytes,8,opt,name=previousScore,proto3" json:"previousScore,omitempty"`
	Tv            string `protobuf:"bytes,9,opt,name=tv,proto3" json:"tv,omitempty"`
}

func (m *Marker) Reset()                    { *m = Marker{} }
func (m *Marker) String() string            { return proto.CompactTextString(m) }
func (*Marker) ProtoMessage()               {}
func (*Marker) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{1} }

type EmptyGet struct {
}

func (m *EmptyGet) Reset()                    { *m = EmptyGet{} }
func (m *EmptyGet) String() string            { return proto.CompactTextString(m) }
func (*EmptyGet) ProtoMessage()               {}
func (*EmptyGet) Descriptor() ([]byte, []int) { return fileDescriptorExample, []int{2} }

func init() {
	proto.RegisterType((*Maps)(nil), "generated.Maps")
	proto.RegisterType((*Marker)(nil), "generated.Marker")
	proto.RegisterType((*EmptyGet)(nil), "generated.EmptyGet")
}
func (this *Maps) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Maps)
	if !ok {
		that2, ok := that.(Maps)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Markers) != len(that1.Markers) {
		return false
	}
	for i := range this.Markers {
		if !this.Markers[i].Equal(that1.Markers[i]) {
			return false
		}
	}
	return true
}
func (this *Marker) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Marker)
	if !ok {
		that2, ok := that.(Marker)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Point != that1.Point {
		return false
	}
	if this.HomeTeam != that1.HomeTeam {
		return false
	}
	if this.AwayTeam != that1.AwayTeam {
		return false
	}
	if this.MarkerImage != that1.MarkerImage {
		return false
	}
	if this.Information != that1.Information {
		return false
	}
	if this.Fixture != that1.Fixture {
		return false
	}
	if this.Capacity != that1.Capacity {
		return false
	}
	if this.PreviousScore != that1.PreviousScore {
		return false
	}
	if this.Tv != that1.Tv {
		return false
	}
	return true
}
func (this *EmptyGet) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EmptyGet)
	if !ok {
		that2, ok := that.(EmptyGet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}

type MapsGetter interface {
	GetMaps() *Maps
}

var GraphQLMapsType *github_com_graphql_go_graphql.Object

type MarkerGetter interface {
	GetMarker() *Marker
}

var GraphQLMarkerType *github_com_graphql_go_graphql.Object

func init() {
	GraphQLMapsType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "generatedMaps",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"markers": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLMarkerType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Maps)
						if ok {
							return obj.Markers, nil
						}
						inter, ok := p.Source.(MapsGetter)
						if ok {
							face := inter.GetMaps()
							if face == nil {
								return nil, nil
							}
							return face.Markers, nil
						}
						return nil, fmt.Errorf("field markers not resolved")
					},
				},
			}
		}),
	})
	GraphQLMarkerType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "generatedMarker",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"point": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Marker)
						if ok {
							return obj.Point, nil
						}
						inter, ok := p.Source.(MarkerGetter)
						if ok {
							face := inter.GetMarker()
							if face == nil {
								return nil, nil
							}
							return face.Point, nil
						}
						return nil, fmt.Errorf("field point not resolved")
					},
				},
				"homeTeam": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Marker)
						if ok {
							return obj.HomeTeam, nil
						}
						inter, ok := p.Source.(MarkerGetter)
						if ok {
							face := inter.GetMarker()
							if face == nil {
								return nil, nil
							}
							return face.HomeTeam, nil
						}
						return nil, fmt.Errorf("field homeTeam not resolved")
					},
				},
				"awayTeam": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Marker)
						if ok {
							return obj.AwayTeam, nil
						}
						inter, ok := p.Source.(MarkerGetter)
						if ok {
							face := inter.GetMarker()
							if face == nil {
								return nil, nil
							}
							return face.AwayTeam, nil
						}
						return nil, fmt.Errorf("field awayTeam not resolved")
					},
				},
				"markerImage": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Marker)
						if ok {
							return obj.MarkerImage, nil
						}
						inter, ok := p.Source.(MarkerGetter)
						if ok {
							face := inter.GetMarker()
							if face == nil {
								return nil, nil
							}
							return face.MarkerImage, nil
						}
						return nil, fmt.Errorf("field markerImage not resolved")
					},
				},
				"information": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Marker)
						if ok {
							return obj.Information, nil
						}
						inter, ok := p.Source.(MarkerGetter)
						if ok {
							face := inter.GetMarker()
							if face == nil {
								return nil, nil
							}
							return face.Information, nil
						}
						return nil, fmt.Errorf("field information not resolved")
					},
				},
				"fixture": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Marker)
						if ok {
							return obj.Fixture, nil
						}
						inter, ok := p.Source.(MarkerGetter)
						if ok {
							face := inter.GetMarker()
							if face == nil {
								return nil, nil
							}
							return face.Fixture, nil
						}
						return nil, fmt.Errorf("field fixture not resolved")
					},
				},
				"capacity": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Marker)
						if ok {
							return obj.Capacity, nil
						}
						inter, ok := p.Source.(MarkerGetter)
						if ok {
							face := inter.GetMarker()
							if face == nil {
								return nil, nil
							}
							return face.Capacity, nil
						}
						return nil, fmt.Errorf("field capacity not resolved")
					},
				},
				"previousScore": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Marker)
						if ok {
							return obj.PreviousScore, nil
						}
						inter, ok := p.Source.(MarkerGetter)
						if ok {
							face := inter.GetMarker()
							if face == nil {
								return nil, nil
							}
							return face.PreviousScore, nil
						}
						return nil, fmt.Errorf("field previousScore not resolved")
					},
				},
				"tv": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Marker)
						if ok {
							return obj.Tv, nil
						}
						inter, ok := p.Source.(MarkerGetter)
						if ok {
							face := inter.GetMarker()
							if face == nil {
								return nil, nil
							}
							return face.Tv, nil
						}
						return nil, fmt.Errorf("field tv not resolved")
					},
				},
			}
		}),
	})
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for MapsService service

type MapsServiceClient interface {
	GetMaps(ctx context.Context, in *EmptyGet, opts ...grpc.CallOption) (*Maps, error)
}

type mapsServiceClient struct {
	cc *grpc.ClientConn
}

func NewMapsServiceClient(cc *grpc.ClientConn) MapsServiceClient {
	return &mapsServiceClient{cc}
}

func (c *mapsServiceClient) GetMaps(ctx context.Context, in *EmptyGet, opts ...grpc.CallOption) (*Maps, error) {
	out := new(Maps)
	err := grpc.Invoke(ctx, "/generated.MapsService/GetMaps", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MapsService service

type MapsServiceServer interface {
	GetMaps(context.Context, *EmptyGet) (*Maps, error)
}

func RegisterMapsServiceServer(s *grpc.Server, srv MapsServiceServer) {
	s.RegisterService(&_MapsService_serviceDesc, srv)
}

func _MapsService_GetMaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapsServiceServer).GetMaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.MapsService/GetMaps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapsServiceServer).GetMaps(ctx, req.(*EmptyGet))
	}
	return interceptor(ctx, in, info, handler)
}

var _MapsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "generated.MapsService",
	HandlerType: (*MapsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMaps",
			Handler:    _MapsService_GetMaps_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorExample,
}

func (m *Maps) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Maps) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Markers) > 0 {
		for _, msg := range m.Markers {
			data[i] = 0xa
			i++
			i = encodeVarintExample(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Marker) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Marker) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Point != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintExample(data, i, uint64(m.Point))
	}
	if len(m.HomeTeam) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintExample(data, i, uint64(len(m.HomeTeam)))
		i += copy(data[i:], m.HomeTeam)
	}
	if len(m.AwayTeam) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintExample(data, i, uint64(len(m.AwayTeam)))
		i += copy(data[i:], m.AwayTeam)
	}
	if len(m.MarkerImage) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintExample(data, i, uint64(len(m.MarkerImage)))
		i += copy(data[i:], m.MarkerImage)
	}
	if len(m.Information) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintExample(data, i, uint64(len(m.Information)))
		i += copy(data[i:], m.Information)
	}
	if len(m.Fixture) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintExample(data, i, uint64(len(m.Fixture)))
		i += copy(data[i:], m.Fixture)
	}
	if len(m.Capacity) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintExample(data, i, uint64(len(m.Capacity)))
		i += copy(data[i:], m.Capacity)
	}
	if len(m.PreviousScore) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintExample(data, i, uint64(len(m.PreviousScore)))
		i += copy(data[i:], m.PreviousScore)
	}
	if len(m.Tv) > 0 {
		data[i] = 0x4a
		i++
		i = encodeVarintExample(data, i, uint64(len(m.Tv)))
		i += copy(data[i:], m.Tv)
	}
	return i, nil
}

func (m *EmptyGet) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *EmptyGet) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeFixed64Example(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Example(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintExample(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedMaps(r randyExample, easy bool) *Maps {
	this := &Maps{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Markers = make([]*Marker, v1)
		for i := 0; i < v1; i++ {
			this.Markers[i] = NewPopulatedMarker(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMarker(r randyExample, easy bool) *Marker {
	this := &Marker{}
	this.Point = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Point *= -1
	}
	this.HomeTeam = randStringExample(r)
	this.AwayTeam = randStringExample(r)
	this.MarkerImage = randStringExample(r)
	this.Information = randStringExample(r)
	this.Fixture = randStringExample(r)
	this.Capacity = randStringExample(r)
	this.PreviousScore = randStringExample(r)
	this.Tv = randStringExample(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEmptyGet(r randyExample, easy bool) *EmptyGet {
	this := &EmptyGet{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyExample interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneExample(r randyExample) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringExample(r randyExample) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneExample(r)
	}
	return string(tmps)
}
func randUnrecognizedExample(r randyExample, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldExample(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldExample(data []byte, r randyExample, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateExample(data, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		data = encodeVarintPopulateExample(data, uint64(v3))
	case 1:
		data = encodeVarintPopulateExample(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateExample(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateExample(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateExample(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateExample(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *Maps) Size() (n int) {
	var l int
	_ = l
	if len(m.Markers) > 0 {
		for _, e := range m.Markers {
			l = e.Size()
			n += 1 + l + sovExample(uint64(l))
		}
	}
	return n
}

func (m *Marker) Size() (n int) {
	var l int
	_ = l
	if m.Point != 0 {
		n += 1 + sovExample(uint64(m.Point))
	}
	l = len(m.HomeTeam)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	l = len(m.AwayTeam)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	l = len(m.MarkerImage)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	l = len(m.Information)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	l = len(m.Fixture)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	l = len(m.Capacity)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	l = len(m.PreviousScore)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	l = len(m.Tv)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	return n
}

func (m *EmptyGet) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovExample(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozExample(x uint64) (n int) {
	return sovExample(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Maps) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Maps: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Maps: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Markers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Markers = append(m.Markers, &Marker{})
			if err := m.Markers[len(m.Markers)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Marker) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Marker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Marker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			m.Point = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Point |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeTeam", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomeTeam = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayTeam", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwayTeam = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkerImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarkerImage = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Information", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Information = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fixture", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fixture = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Capacity = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousScore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousScore = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tv", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tv = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmptyGet) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipExample(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExample(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExample
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExample
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExample
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthExample
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowExample
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipExample(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthExample = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExample   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorExample = []byte{
	// 397 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xb1, 0xae, 0xd3, 0x30,
	0x14, 0x86, 0xe5, 0xdc, 0x36, 0x69, 0x5d, 0x2e, 0x08, 0xc3, 0x60, 0x45, 0x57, 0x21, 0x8a, 0x18,
	0x2a, 0x21, 0x12, 0x74, 0xef, 0xcc, 0x82, 0x84, 0x2a, 0x24, 0xba, 0xb4, 0xbc, 0x80, 0x1b, 0x4e,
	0x53, 0x8b, 0x3a, 0xb6, 0x1c, 0x27, 0xb4, 0x2b, 0x03, 0x2f, 0xc0, 0x1b, 0x30, 0xf1, 0x08, 0x8c,
	0x8c, 0x8c, 0x48, 0xbc, 0x00, 0x44, 0x3c, 0x04, 0x23, 0x8a, 0x4d, 0x7a, 0xd3, 0xed, 0xfc, 0xff,
	0xff, 0x1d, 0x1d, 0xeb, 0x37, 0xbe, 0x84, 0x03, 0x13, 0x6a, 0x0f, 0xa9, 0xd2, 0xd2, 0x48, 0x32,
	0x2d, 0xa0, 0x04, 0xcd, 0x0c, 0xbc, 0x0d, 0xaf, 0x0a, 0x29, 0x8b, 0x3d, 0x64, 0x4c, 0xf1, 0x8c,
	0x95, 0xa5, 0x34, 0xcc, 0x70, 0x59, 0x56, 0x0e, 0x0c, 0x9f, 0x16, 0xdc, 0xec, 0xea, 0x4d, 0x9a,
	0x4b, 0x91, 0x15, 0xb2, 0x90, 0x99, 0xb5, 0x37, 0xf5, 0xd6, 0x2a, 0x2b, 0xec, 0xf4, 0x1f, 0x7f,
	0x36, 0xc0, 0xa5, 0xaa, 0x00, 0x6e, 0x79, 0x2b, 0xdd, 0x82, 0x1d, 0xdd, 0x46, 0x72, 0x83, 0x47,
	0x4b, 0xa6, 0x2a, 0xf2, 0x04, 0x07, 0x82, 0xe9, 0x77, 0xa0, 0x2b, 0x8a, 0xe2, 0x8b, 0xf9, 0xec,
	0xfa, 0x7e, 0x7a, 0x7a, 0x63, 0xba, 0xb4, 0xc9, 0xaa, 0x27, 0x92, 0x8f, 0x1e, 0xf6, 0x9d, 0x47,
	0x1e, 0xe2, 0xb1, 0x92, 0xbc, 0x34, 0x14, 0xc5, 0x68, 0x3e, 0x5e, 0x39, 0x41, 0x42, 0x3c, 0xd9,
	0x49, 0x01, 0x6f, 0x80, 0x09, 0xea, 0xc5, 0x68, 0x3e, 0x5d, 0x9d, 0x74, 0x97, 0xb1, 0xf7, 0xec,
	0x68, 0xb3, 0x0b, 0x97, 0xf5, 0x9a, 0xc4, 0x78, 0xe6, 0x6e, 0xbc, 0x12, 0xac, 0x00, 0x3a, 0xb2,
	0xf1, 0xd0, 0xea, 0x08, 0x5e, 0x6e, 0xa5, 0x16, 0xb6, 0x26, 0x3a, 0x76, 0xc4, 0xc0, 0x22, 0x14,
	0x07, 0x5b, 0x7e, 0x30, 0xb5, 0x06, 0xea, 0xdb, 0xb4, 0x97, 0xdd, 0xe5, 0x9c, 0x29, 0x96, 0x73,
	0x73, 0xa4, 0x81, 0xbb, 0xdc, 0x6b, 0xf2, 0x18, 0x5f, 0x2a, 0x0d, 0x0d, 0x97, 0x75, 0xb5, 0xce,
	0xa5, 0x06, 0x3a, 0xb1, 0xc0, 0xb9, 0x49, 0xee, 0x62, 0xcf, 0x34, 0x74, 0x6a, 0x23, 0xcf, 0x34,
	0x09, 0xc6, 0x93, 0x97, 0x42, 0x99, 0xe3, 0x02, 0xcc, 0xf5, 0x6b, 0x3c, 0xeb, 0x9a, 0x5c, 0x83,
	0x6e, 0x78, 0x0e, 0xe4, 0x39, 0x0e, 0x16, 0x60, 0x6c, 0xb7, 0x0f, 0x06, 0x55, 0xf6, 0x78, 0x78,
	0xef, 0xac, 0x5f, 0x55, 0x25, 0x77, 0x3e, 0xfc, 0xfc, 0xf3, 0xc9, 0xf3, 0xc9, 0x28, 0x13, 0x4c,
	0xbd, 0xb8, 0xfa, 0xfb, 0x3b, 0x42, 0x5f, 0xda, 0x08, 0x7d, 0x6d, 0x23, 0xf4, 0xbd, 0x8d, 0xd0,
	0x8f, 0x36, 0x42, 0xbf, 0xda, 0x08, 0x7d, 0xfb, 0xfc, 0x08, 0x6d, 0x7c, 0xfb, 0x79, 0x37, 0xff,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x1e, 0x66, 0xe1, 0x1b, 0x57, 0x02, 0x00, 0x00,
}
